*{
    margin: 0%;
    box-sizing: border-box;
}

body{
    font-family: 'Arial';
}

.container{
    width: 90%;
    height: 1200px;
    outline: 2px solid;
    margin: 40px auto;

    display: grid;
/* con el grid podemos posicionar los items en base a lineas */
/*grid-template-columns: 30% 50px 100px;*/
/*  grid-template-columns: 1fr 1fr 1fr; */
/* grid-template-columns: repeat(5, 1fr); nos permite crear columnas y filas dinamicamente, que se ajusten a un cierto tama√±o, dependiendo del espacio disponible*/    
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
/*  grid-template-rows: repeat(5, 1fr); */
/* grid-auto-rows: 100px; */
/*  column-gap: 20px 10px; */   /*el pimer valor lo toma para las filas y el segundo para las columnas*/
/* grid-template-areas: */ /* para definir filas ponemos comillas, en nuestro caso 5 */
/*  "elemen1 element1 element1 element2 element2"
    "elemen1 element1 element1 element2 element2"
    "element3 element3 element3 element2 element2"
    "element3 element3 element3 element2 element2"
    "element4 element4 element4 element4 element4"; */
    gap: 10px;
    /* shift + alt + flecha abajo duplica la linea de codigo seleccionada */
}

.item{
  /*   width: 100px;
    height: 100px; */
    color: #fff;
    font-size: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-size: cover;
    background-position: center;
}

.item1{
    background-color: slateblue;
    background-image: url("image1.jpg");
/*     grid-column: lina-inicial / linea-final;*/
   /*  grid-column: 1/4; 
    grid-row: 1/3; */ /* es exactamente lo mismo que grid clumn pero ahora hablamos de lineas en filas */
    /* grid-area: element1; */ /* posicionamos a traves de areas, colocamos en toda el area correspondiente el elemento */
}

.item2{
    background-color: deeppink;
    background-image: url("image2.jpg");
    /* grid-column: 4/6;
    grid-row: 1/5; */
    /* grid-area: element2;*/
}

.item3{
    background-color: seagreen;
    background-image: url("image3.jpg");
    /* grid-column: 1/4;
    grid-row: 3/5; */
    /* grid-area: element3; */

}

.item4{
    background-color: brown;
    background-image: url("image4.jpg");
    /* grid-column: 1/-1; */
    /* cuando ponemos -1 indicamos que vaya hasta la ultima linea sin imortar si la grid se hace mas grande */
    /* grid-row:5/-1; */
    /* grid-area: element4; */

}

.item5{
    background-color: cornflowerblue;
    background-image: url("image5.png");
}

.item6{
    background-color: rebeccapurple;
    background-image: url("image6.jpg");
}

/* @media (min-width:700px){ cuando el elemento tenga un ancho minimo de 700 pixelex, las areas cambian 
    .container{
         grid-auto-rows: 100px
        grid-template-areas:  solamente con modificar el grid-template-areas podemos mover a los elementos de posicion 
        "elemen1 element1 element1 element2 element2"
        "elemen1 element1 element1 element2 element2"
        "element3 element3 element3 element2 element2"
        "element3 element3 element3 element2 element2"
        "element4 element4 element4 element2 element2";
         si queremos que una selda se quede vacia vamos a ponerle un punto
           ejemplo: "element4 element4 element4 element4 ."
         gap: 10px;
    }
} */

/* Nota: en el video se especifica que hay una pagina
con todos los recursos, pero decidi escribir todo y 
conseguir las imagenes de manera personal */